package hudson.tasks;

import hudson.FilePath;
import hudson.Launcher;
import hudson.model.AbstractBuild;
import hudson.model.Action;
import hudson.model.BuildListener;
import hudson.model.FreeStyleBuild;
import hudson.model.FreeStyleProject;
import java.io.IOException;
import static org.junit.Assert.*;
import org.junit.Rule;
import org.junit.Test;
import org.jvnet.hudson.test.JenkinsRule;
import org.jvnet.hudson.test.TestBuilder;

public class JavadocArchiverTest {

    @Rule public JenkinsRule r = new JenkinsRule();

    @Test public void configRoundtrip() throws Exception {
        verify(new JavadocArchiver("foo", true));
        verify(new JavadocArchiver(".", false));
    }

    private void verify(JavadocArchiver before) throws Exception {
        FreeStyleProject p = r.createFreeStyleProject();
        p.getPublishersList().add(before);
        r.configRoundtrip(p);
        r.assertEqualDataBoundBeans(before, p.getPublishersList().get(JavadocArchiver.class));
    }

    @Test public void keepAll() throws Exception {
        FreeStyleProject p = r.createFreeStyleProject();
        p.getBuildersList().add(new MakeDocBuilder());
        p.getPublishersList().add(new JavadocArchiver("doc", true));
        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);
        FreeStyleBuild b2 = r.buildAndAssertSuccess(p);
        assertShowsDoc(b1.getAction(JavadocArchiver.JavadocBuildAction.class), b1.getUrl(), "generated by #1");
        assertShowsDoc(b2.getAction(JavadocArchiver.JavadocBuildAction.class), b2.getUrl(), "generated by #2");
        assertShowsDoc(p.getAction(JavadocArchiver.JavadocAction.class), p.getUrl(), "generated by #2");
    }

    @Test public void doNotKeepAll() throws Exception {
        FreeStyleProject p = r.createFreeStyleProject();
        p.getBuildersList().add(new MakeDocBuilder());
        p.getPublishersList().add(new JavadocArchiver("doc", false));
        FreeStyleBuild b1 = r.buildAndAssertSuccess(p);
        FreeStyleBuild b2 = r.buildAndAssertSuccess(p);
        assertHidden(b1.getAction(JavadocArchiver.JavadocBuildAction.class));
        assertHidden(b2.getAction(JavadocArchiver.JavadocBuildAction.class));
        assertShowsDoc(p.getAction(JavadocArchiver.JavadocAction.class), p.getUrl(), "generated by #2");
    }

    private static final class MakeDocBuilder extends TestBuilder {
        @Override public boolean perform(AbstractBuild<?,?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {
            FilePath dir = build.getWorkspace().child("doc");
            dir.mkdirs();
            dir.child("index.html").write("generated by #" + build.number, null);
            return true;
        }
    }

    private void assertShowsDoc(Action a, String baseUrl, String text) throws Exception {
        assertNotNull(a);
        assertEquals(JavadocArchiver.HELP_PNG, a.getIconFileName());
        assertEquals(text, r.createWebClient().goTo(baseUrl + a.getUrlName() + "/").getWebResponse().getContentAsString());
    }

    private void assertHidden(Action a) {
        if (a != null) { // allow it to be missing or present but hidden
            assertNull(a.getIconFileName());
        }
    }

}
